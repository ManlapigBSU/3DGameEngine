#version 150

//input from vertshader
//in vec3 color;
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main() {

    //normalize
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    //light to object vector
    vec3 lightDirection = -unitLightVector;

    //light reflected vector aka flipped
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

     //compute dot product for diffuse lighting
     float nDot1 = dot(unitNormal, unitLightVector);
     float brightness = max(nDot1, 0.2);
     vec3 diffuse = brightness * lightColor;

     //compute dot product for reflection
     float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
     specularFactor = max(specularFactor, 0.0);

     //dampens reflection
     float dampedFactor = pow(specularFactor, shineDamper);

     vec3 finalSpecular = dampedFactor * reflectivity * lightColor;

    //takes in texture sample, and the coordinates
    out_Color = vec4 (diffuse, 1.0) * texture(textureSampler, pass_textureCoords) + vec4 (finalSpecular, 1.0);

}
