#version 150

//input is from vao
in vec3 position;
in vec2 textureCoords;
in vec3 normal;

//output
//out vec3 color;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;

out vec2 pass_textureCoords;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

void main() {

    //where to render the vertex
    vec4 worldPosition = transformationMatrix * vec4(position.x, position.y, position.z, 1.0);
    gl_Position = projectionMatrix * viewMatrix * worldPosition;
    pass_textureCoords = textureCoords;
    //color = vec3(position.x + 0.5, 1.0, position.y + 0.5);

    surfaceNormal = normalize((transpose(inverse(transformationMatrix)) * vec4(normal, 0.0)).xyz);
    toLightVector = lightPosition - worldPosition.xyz;
    toCameraVector = (inverse(viewMatrix) * vec4( 0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

}
